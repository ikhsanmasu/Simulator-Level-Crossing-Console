# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'REV03.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# IKHSAN MAULANA
# SIMULATOR CONSOLE JPL Project TBI Lahat

from PyQt5 import QtCore, QtGui, QtWidgets
import os
import time
from pygame import mixer  # Load the popular external library
from PyQt5.QtCore import QObject, QThread, pyqtSignal, QTimer
from pyModbusTCP.client import ModbusClient

dir = os.getcwd()
ipDefault = "10.10.3.106"
c = ModbusClient(host=ipDefault, port=502, auto_open=True, debug=False)
# multi threading untuk nyalakan alarm
class alarmSoundEfect(QObject):
    mixer.init()
    tengSound = mixer.Sound(dir + '/ICON/teng.mp3')
    nongSound = mixer.Sound(dir + '/ICON/nong.mp3')
    tengSound.set_volume(2)
    nongSound.set_volume(2)
    teng = pyqtSignal() #kirim signal untuk ganti warna lampu jpl
    nong = pyqtSignal()

    def __init__(self):
        super(alarmSoundEfect, self).__init__()
        self._alarmBunyi = 0
    # nyalakan alarm ketika dapat perintah start dari tombol alarm dan manual
    def run(self):
        while True:
            if self._alarmBunyi:
                self.teng.emit()
                self.tengSound.play()
                time.sleep(self.tengSound.get_length())

                self.nong.emit()
                self.nongSound.play()
                time.sleep(self.nongSound.get_length())

    def bunyiAlarmStop(self):
        self._alarmBunyi = 0

    def bunyiAlarmStart(self):
        self._alarmBunyi = 1

# multi threading untuk nyalakan buzzer
class buzzerSoundEfect(QObject):
    mixer.init()
    buzzerSound = mixer.Sound(dir + '/ICON/BUZZER.mp3')
    buzzerSound.set_volume(0.05)

    def __init__(self):
        super(buzzerSoundEfect, self).__init__()
        self._buzzerBunyi = 0
        self.numpangFlashing = 0

    def run(self):
        while True:
            if self._buzzerBunyi:
                self.buzzerSound.play()
                time.sleep(self.buzzerSound.get_length())


    def bunyiBuzzerStop(self):
        self._buzzerBunyi = 0

    def bunyiBuzzerStart(self):
        self._buzzerBunyi = 1

class modbusClass(QObject):
    def __init__(self):
        super(modbusClass, self).__init__()
        self.readData = [0]
        self.writeData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        self.statusModbus = "Tidak Terhubung"
    def run(self):
        while True:
            self.readData = c.read_holding_registers(0, 1)
            if self.readData == None:
                self.readData = [0]
            bin2dec = 0
            for i, x in enumerate(self.writeData):
                bin2dec += self.writeData[i] * 2 ** i

            is_ok = c.write_multiple_registers(0, [bin2dec])
            if is_ok and (self.readData != None):
                self.statusModbus = "Terhubung"
            else:
                self.statusModbus = "Tidak Terhubung"

    def readHolding(self):
        return self.readData

    def writeHolding(self, data):
        self.writeData = data

    def status(self):
        return self.statusModbus

class Ui_MainWindow(object):
    def __init__(self):
        # variable indikasi F30
        self.buzzerDO = 0
        self.alarmDO = 1
        self.dirWarDO = 0
        self.dirEarDO = 0
        self.BRUPDO = 1
        self.BRDNDO = 0
        self.COMMDO = 0
        self.ackDO = 0

        # variable perintah ke F30
        self.ackConsoleDI = 0
        self.buzzerStopDI = 0
        self.brAutoDI = 1
        self.brSemiAutoDI = 0
        self.brManualDI = 0
        self.brPosUPDI = 1
        self.brPosDNDI = 0
        self.ackTBIDI = 0
        self.ZP1DI = 0
        self.ZP2DI = 0
        self.ZP3DI = 0
        self.ABCDHDLDI = 0

        #variable internal
        self.powerState = 1 # keadaan power
        self.alarmState = 0 # posisi toogle alarm, 1 ketika ON 0 ketika OFF
        self.bukaPerintang = 0 # perintah buka perintang atau relay BR UP
        self.tutupPerintang = 0 # perintah tutup perintang atau relay BR DN
        self.rem = 0 # perintah rem perintang
        self.derajatJPL = 0 # posisi JPL diwakilkan angka 0-9 mengartikan posisi per 10 derajat
        self.bunyikanAlarm = 0
        self.flash = 0
        self.cancleFlash = 0
        self.ackIND = 0

        #variable simulator hima
        self.occEar = 0
        self.occWar = 0
        self.occ = 0
        self.bzStp = 1
        self.acknowledged = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1351, 871)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.CONSOLE = QtWidgets.QLabel(self.centralwidget)
        self.CONSOLE.setGeometry(QtCore.QRect(0, 0, 1351, 831))
        self.CONSOLE.setText("")
        self.CONSOLE.setPixmap(QtGui.QPixmap(dir + "/ICON/Console.jpg"))
        self.CONSOLE.setScaledContents(True)
        self.CONSOLE.setObjectName("CONSOLE")
        self.ACKNOWLEDGE = QtWidgets.QPushButton(self.centralwidget)
        self.ACKNOWLEDGE.setGeometry(QtCore.QRect(837, 686, 60, 60))
        self.ACKNOWLEDGE.setText("")
        self.ACKNOWLEDGE.setFlat(True)
        self.ACKNOWLEDGE.setObjectName("ACKNOWLEDGE")
        self.BRAKE = QtWidgets.QPushButton(self.centralwidget)
        self.BRAKE.setGeometry(QtCore.QRect(1021, 686, 60, 60))
        self.BRAKE.setText("")
        self.BRAKE.setFlat(True)
        self.BRAKE.setObjectName("BRAKE")
        self.OPEN_BARIER = QtWidgets.QPushButton(self.centralwidget)
        self.OPEN_BARIER.setGeometry(QtCore.QRect(1116, 686, 60, 60))
        self.OPEN_BARIER.setText("")
        self.OPEN_BARIER.setFlat(True)
        self.OPEN_BARIER.setObjectName("OPEN_BARIER")
        self.CLOSE_BARRIER = QtWidgets.QPushButton(self.centralwidget)
        self.CLOSE_BARRIER.setGeometry(QtCore.QRect(1211, 686, 60, 60))
        self.CLOSE_BARRIER.setText("")
        self.CLOSE_BARRIER.setFlat(True)
        self.CLOSE_BARRIER.setObjectName("CLOSE_BARRIER")
        self.COMMUNICATION = QtWidgets.QLabel(self.centralwidget)
        self.COMMUNICATION.setGeometry(QtCore.QRect(844, 287, 21, 21))
        self.COMMUNICATION.setText("")
        self.COMMUNICATION.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.COMMUNICATION.setScaledContents(True)
        self.COMMUNICATION.setObjectName("COMMUNICATION")
        self.BARIER_DOWN = QtWidgets.QLabel(self.centralwidget)
        self.BARIER_DOWN.setGeometry(QtCore.QRect(844, 227, 21, 21))
        self.BARIER_DOWN.setText("")
        self.BARIER_DOWN.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.BARIER_DOWN.setScaledContents(True)
        self.BARIER_DOWN.setObjectName("BARIER_DOWN")
        self.BARIER_UP = QtWidgets.QLabel(self.centralwidget)
        self.BARIER_UP.setGeometry(QtCore.QRect(844, 197, 21, 21))
        self.BARIER_UP.setText("")
        self.BARIER_UP.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.BARIER_UP.setScaledContents(True)
        self.BARIER_UP.setObjectName("BARIER_UP")
        self.POWER = QtWidgets.QLabel(self.centralwidget)
        self.POWER.setGeometry(QtCore.QRect(1028, 197, 21, 21))
        self.POWER.setText("")
        self.POWER.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.POWER.setScaledContents(True)
        self.POWER.setObjectName("POWER")
        self.DIRECTION_A = QtWidgets.QLabel(self.centralwidget)
        self.DIRECTION_A.setGeometry(QtCore.QRect(196, 456, 63, 73))
        self.DIRECTION_A.setText("")
        self.DIRECTION_A.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-a-off.png"))
        self.DIRECTION_A.setScaledContents(True)
        self.DIRECTION_A.setObjectName("DIRECTION_A")
        self.DIRECTION_B = QtWidgets.QLabel(self.centralwidget)
        self.DIRECTION_B.setGeometry(QtCore.QRect(1090, 456, 64, 73))
        self.DIRECTION_B.setText("")
        self.DIRECTION_B.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-b-off.png"))
        self.DIRECTION_B.setScaledContents(True)
        self.DIRECTION_B.setObjectName("DIRECTION_B")
        self.BUZZER_STOP = QtWidgets.QPushButton(self.centralwidget)
        self.BUZZER_STOP.setGeometry(QtCore.QRect(420, 690, 51, 51))
        self.BUZZER_STOP.setText("")
        self.BUZZER_STOP.setFlat(True)
        self.BUZZER_STOP.setObjectName("BUZZER_STOP")
        self.ALARM = QtWidgets.QPushButton(self.centralwidget)
        self.ALARM.setGeometry(QtCore.QRect(496, 212, 75, 71))
        self.ALARM.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(dir + "/ICON/toogle-off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ALARM.setIcon(icon)
        self.ALARM.setIconSize(QtCore.QSize(70, 70))
        self.ALARM.setObjectName("ALARM")
        self.AUTOMATIC = QtWidgets.QPushButton(self.centralwidget)
        self.AUTOMATIC.setGeometry(QtCore.QRect(82, 621, 101, 31))
        self.AUTOMATIC.setText("")
        self.AUTOMATIC.setFlat(True)
        self.AUTOMATIC.setObjectName("AUTOMATIC")
        self.SEMI_AUTOMATIC = QtWidgets.QPushButton(self.centralwidget)
        self.SEMI_AUTOMATIC.setGeometry(QtCore.QRect(192, 683, 101, 31))
        self.SEMI_AUTOMATIC.setText("")
        self.SEMI_AUTOMATIC.setFlat(True)
        self.SEMI_AUTOMATIC.setObjectName("SEMI_AUTOMATIC")
        self.MANUAL = QtWidgets.QPushButton(self.centralwidget)
        self.MANUAL.setGeometry(QtCore.QRect(82, 742, 101, 31))
        self.MANUAL.setText("")
        self.MANUAL.setFlat(True)
        self.MANUAL.setObjectName("MANUAL")
        self.SELECTOR_SWITCH = QtWidgets.QLabel(self.centralwidget)
        self.SELECTOR_SWITCH.setGeometry(QtCore.QRect(92, 655, 85, 85))
        self.SELECTOR_SWITCH.setText("")
        self.SELECTOR_SWITCH.setPixmap(QtGui.QPixmap(dir + "/ICON/selector-switch-AUTOMATIC.png"))
        self.SELECTOR_SWITCH.setScaledContents(True)
        self.SELECTOR_SWITCH.setObjectName("SELECTOR_SWITCH")
        self.ZP1 = QtWidgets.QPushButton(self.centralwidget)
        self.ZP1.setGeometry(QtCore.QRect(290, 430, 93, 28))
        self.ZP1.setObjectName("ZP1")
        self.ZP2 = QtWidgets.QPushButton(self.centralwidget)
        self.ZP2.setGeometry(QtCore.QRect(520, 430, 93, 28))
        self.ZP2.setObjectName("ZP2")
        self.ZP3 = QtWidgets.QPushButton(self.centralwidget)
        self.ZP3.setGeometry(QtCore.QRect(940, 430, 93, 28))
        self.ZP3.setObjectName("ZP3")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(50, 41, 131, 131))
        self.frame.setStyleSheet("background-color: rgb(233, 239, 255);\n"
                                 "border-color: rgb(197, 197, 197);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.ACK_REQUEST = QtWidgets.QPushButton(self.frame)
        self.ACK_REQUEST.setGeometry(QtCore.QRect(20, 35, 93, 28))
        self.ACK_REQUEST.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.ACK_REQUEST.setObjectName("ACK_REQUEST")
        self.ABCD_HDL = QtWidgets.QPushButton(self.frame)
        self.ABCD_HDL.setGeometry(QtCore.QRect(20, 70, 93, 28))
        self.ABCD_HDL.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.ABCD_HDL.setObjectName("ABCD_HDL")
        self.ACK_REQUEST_DO = QtWidgets.QLabel(self.frame)
        self.ACK_REQUEST_DO.setGeometry(QtCore.QRect(20, 104, 21, 21))
        self.ACK_REQUEST_DO.setText("")
        self.ACK_REQUEST_DO.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.ACK_REQUEST_DO.setScaledContents(True)
        self.ACK_REQUEST_DO.setObjectName("ACK_REQUEST_DO")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(50, 107, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(20, 12, 61, 16))
        self.label_2.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1351, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.JPL_ATAS = QtWidgets.QLabel(self.centralwidget)
        self.JPL_ATAS.setGeometry(QtCore.QRect(630, 319, 181, 161))
        self.JPL_ATAS.setText("")
        self.JPL_ATAS.setPixmap(QtGui.QPixmap(dir + "/ICON/LEFT-JPL-0.png"))
        self.JPL_ATAS.setScaledContents(True)
        self.JPL_ATAS.setObjectName("JPL_KIRI")
        self.JPL_BAWAH = QtWidgets.QLabel(self.centralwidget)
        self.JPL_BAWAH.setGeometry(QtCore.QRect(540, 494, 181, 161))
        self.JPL_BAWAH.setText("")
        self.JPL_BAWAH.setPixmap(QtGui.QPixmap(dir + "/ICON/RIGHT-JPL-0.png"))
        self.JPL_BAWAH.setScaledContents(True)
        self.JPL_BAWAH.setObjectName("JPL_KANAN")
        self.Lampu_JPLAtas_R = QtWidgets.QLabel(self.centralwidget)
        self.Lampu_JPLAtas_R.setGeometry(QtCore.QRect(762, 405, 10, 10))
        self.Lampu_JPLAtas_R.setText("")
        self.Lampu_JPLAtas_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLAtas_R.setScaledContents(True)
        self.Lampu_JPLAtas_R.setObjectName("LEFT_JPL_R")
        self.Lampu_JPLAtas_L = QtWidgets.QLabel(self.centralwidget)
        self.Lampu_JPLAtas_L.setGeometry(QtCore.QRect(741, 405, 10, 10))
        self.Lampu_JPLAtas_L.setText("")
        self.Lampu_JPLAtas_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLAtas_L.setScaledContents(True)
        self.Lampu_JPLAtas_L.setObjectName("LEFT_JPL_L")
        self.Lampu_JPLBawah_L = QtWidgets.QLabel(self.centralwidget)
        self.Lampu_JPLBawah_L.setGeometry(QtCore.QRect(579, 580, 10, 10))
        self.Lampu_JPLBawah_L.setText("")
        self.Lampu_JPLBawah_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_L.setScaledContents(True)
        self.Lampu_JPLBawah_L.setObjectName("RIGHT_JPL_L")
        self.Lampu_JPLBawah_R = QtWidgets.QLabel(self.centralwidget)
        self.Lampu_JPLBawah_R.setGeometry(QtCore.QRect(601, 580, 10, 10))
        self.Lampu_JPLBawah_R.setText("")
        self.Lampu_JPLBawah_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_R.setScaledContents(True)
        self.Lampu_JPLBawah_R.setObjectName("RIGHT_JPL_R")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(200, 40, 161, 131))
        self.frame_2.setStyleSheet("background-color: rgb(255, 255, 127);\n"
                                   "border-color: rgb(197, 197, 197);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.PAKAIHIMA = QtWidgets.QCheckBox(self.frame_2)
        self.PAKAIHIMA.setGeometry(QtCore.QRect(20, 20, 111, 17))
        self.PAKAIHIMA.setChecked(True)
        self.PAKAIHIMA.setTristate(False)
        self.PAKAIHIMA.setObjectName("PAKAIHIMA")
        self.IPHIMA = QtWidgets.QLineEdit(self.frame_2)
        self.IPHIMA.setGeometry(QtCore.QRect(20, 50, 113, 20))
        self.IPHIMA.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.IPHIMA.setObjectName("IPHIMA")
        self.UPDATEIP = QtWidgets.QPushButton(self.frame_2)
        self.UPDATEIP.setGeometry(QtCore.QRect(40, 70, 71, 21))
        self.UPDATEIP.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.UPDATEIP.setObjectName("UPDATEIP")
        self.errormessage = QtWidgets.QLabel(self.frame_2)
        self.errormessage.setGeometry(QtCore.QRect(20, 100, 121, 16))
        self.errormessage.setText("")
        self.errormessage.setObjectName("errormessage")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1351, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # tambahan selain dari QT

        # 1. ACK
        self.ACKNOWLEDGE.pressed.connect(self.ackConsolePressed)
        self.ACKNOWLEDGE.released.connect(self.ackConsoleReleased)

        # 2. Buzzer miltithreading, threading selalu aktif hanya perintah bunyinya yang dikendalikan
        self.threadBuzzer = QThread()
        self.bunyiBuzzer= buzzerSoundEfect()
        self.bunyiBuzzer.moveToThread(self.threadBuzzer)
        self.threadBuzzer.started.connect(self.bunyiBuzzer.run)
        self.threadBuzzer.start()
        self.BUZZER_STOP.pressed.connect(self.buzzerStopPressed)
        self.BUZZER_STOP.released.connect(self.buzzerStopReleased)

        self.iconalarmOn = QtGui.QIcon()
        self.iconalarmOn.addPixmap(QtGui.QPixmap(dir + "/ICON/toogle-on.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.iconalarmOff = QtGui.QIcon()
        self.iconalarmOff.addPixmap(QtGui.QPixmap(dir + "/ICON/toogle-off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ALARM.setIcon(self.iconalarmOff)
        self.ALARM.clicked.connect(self.ALARMclicked)

        # 3. 4. 5.
        self.AUTOMATIC.clicked.connect(self.switchAUTO)
        self.SEMI_AUTOMATIC.clicked.connect(self.switchSEMI)
        self.MANUAL.clicked.connect(self.switchMANUAL)

        # 6. timer update animasi JPL
        self.timerJpl = QtCore.QTimer()
        self.timerJpl.setInterval(1000)
        self.timerJpl.timeout.connect(self.updateJPL)
        self.timerJpl.start()
        self.BRAKE.pressed.connect(self.brakePressed)
        self.BRAKE.released.connect(self.brakeReleased)
        self.CLOSE_BARRIER.clicked.connect(self.closeBRClicked)
        self.OPEN_BARIER.clicked.connect(self.openBRClicked)

        # 7. simulasi ACK dari TBI
        self.ACK_REQUEST.pressed.connect(self.ackTBIPressed)
        self.ACK_REQUEST.released.connect(self.ackTBIReleased)

        # 8. 9. 10. simulasi Kontak Rel
        self.ZP1.pressed.connect(self.ZP1Pressed)
        self.ZP1.released.connect(self.ZP1Released)
        self.ZP2.pressed.connect(self.ZP2Pressed)
        self.ZP2.released.connect(self.ZP2Released)
        self.ZP3.pressed.connect(self.ZP3Pressed)
        self.ZP3.released.connect(self.ZP3Released)

        # 11. HDL DI
        self.ABCD_HDL.pressed.connect(self.HDLPressed)
        self.ABCD_HDL.released.connect(self.HDLReleased)

        # timer baca modbus dan update indikasi console
        self.timerINDConsole = QtCore.QTimer()
        self.timerINDConsole.setInterval(200)
        self.timerINDConsole.timeout.connect(self.readModbus)
        self.timerINDConsole.start()

        # timer update modbus write
        self.timerWriteModbus = QtCore.QTimer()
        self.timerWriteModbus.setInterval(200)
        self.timerWriteModbus.timeout.connect(self.writeModbus)
        self.timerWriteModbus.start()

        # miltithreading untuk bunyi alarm, threading selalu aktif hanya perintah bunyinya yang di kendalikan
        self.threadAlarm = QThread()
        self.bunyiAlarm = alarmSoundEfect()
        self.bunyiAlarm.moveToThread(self.threadAlarm)
        self.threadAlarm.started.connect(self.bunyiAlarm.run)
        self.bunyiAlarm.teng.connect(self.flipLampuJPL)
        self.bunyiAlarm.nong.connect(self.flopLampuJPL)
        self.threadAlarm.start()

        # threading modbus
        self.threadMosbus = QThread()
        self.updateMosbus= modbusClass()
        self.updateMosbus.moveToThread(self.threadMosbus)
        self.threadMosbus.started.connect(self.updateMosbus.run)
        self.threadMosbus.start()

        # timer flash
        self.timerFlash = QtCore.QTimer()
        self.timerFlash.setInterval(1000)
        self.timerFlash.timeout.connect(self.flashingApp)
        self.timerFlash.start()


        self.UPDATEIP.clicked.connect(self.updateIPMODBUS)

        mixer.init()
        self.klik = mixer.Sound(dir + '/ICON/CLICK.mp3')

        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ZP1.setText(_translate("MainWindow", "ZP1"))
        self.ZP2.setText(_translate("MainWindow", "ZP2"))
        self.ZP3.setText(_translate("MainWindow", "ZP3"))
        self.ACK_REQUEST.setText(_translate("MainWindow", "ACK REQUEST"))
        self.ABCD_HDL.setText(_translate("MainWindow", "A/B/C/D-HDL-DI"))
        self.label.setText(_translate("MainWindow", "ACK-IND"))
        self.label_2.setText(_translate("MainWindow", "PANEL TBI"))
        self.PAKAIHIMA.setText(_translate("MainWindow", "HIMA"))
        self.IPHIMA.setText(_translate("MainWindow", "10.10.3.106"))
        self.UPDATEIP.setText(_translate("MainWindow", "UPDATE IP"))

    def flashingApp(self):
        if self.flash:
            self.flash = 0
        else:
            self.flash = 1

    ################################ list indikasi di JPL ######################################
    def updateINDConsole(self):
        # 1. ACK-DO
        if self.ackDO:
            self.ACK_REQUEST_DO.setPixmap(QtGui.QPixmap(dir + "/ICON/led-yellow-on.png"))
        else:
            self.ACK_REQUEST_DO.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))

        # 2. DIRECTION A
        # menggunakan hima
        if self.dirEarDO:
            self.DIRECTION_A.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-a-on.png"))
        else:
            self.DIRECTION_A.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-a-off"))

        # 3. DIRECTION B
        # mengguunakan hima
        if self.dirWarDO:
            self.DIRECTION_B.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-b-on.png"))
        else:
            self.DIRECTION_B.setPixmap(QtGui.QPixmap(dir + "/ICON/direction-b-off"))
        # 5. Lampu JPL = atas kiri kanan dan bawah kiri kanan
        if not self.alarmState or self.brSemiAutoDI or self.brAutoDI:
            self.matikanLampuJPL()
        # 6. Barier UP
        if self.brPosUPDI:
            self.BARIER_UP.setPixmap(QtGui.QPixmap(dir + "/ICON/led-yellow-on.png"))
        else:
            self.BARIER_UP.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        # 7. Barier DOWN
        if self.brPosDNDI:
            self.BARIER_DOWN.setPixmap(QtGui.QPixmap(dir + "/ICON/led-yellow-on.png"))
        else:
            self.BARIER_DOWN.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        # 8. Communication
        if self.COMMDO:
            self.COMMUNICATION.setPixmap(QtGui.QPixmap(dir + "/ICON/led-yellow-on.png"))
        else:
            self.COMMUNICATION.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        # 9. Power
        if self.powerState:
            self.POWER.setPixmap(QtGui.QPixmap(dir + "/ICON/led-green-on.png"))
        # 10. Buzzer
        if self.buzzerDO:
            self.bunyiBuzzer.bunyiBuzzerStart()
        else:
            self.bunyiBuzzer.bunyiBuzzerStop()
        # 11. Alarm
        # alarm hanya bisa dinyalakan lewat toogle switch saat operasi manual
        if self.brManualDI:
            if self.alarmState:
                self.bunyiAlarm.bunyiAlarmStart()
            else:
                self.bunyiAlarm.bunyiAlarmStop()
        else:
            if self.alarmDO:
                self.bunyiAlarm.bunyiAlarmStart()
            else:
                self.bunyiAlarm.bunyiAlarmStop()

        # 12. Indikasi ACK-IND di panel TBI, nyala saat request ack ditekan, padam saat console ack
        if self.ackDO == 1:
            self.ackIND = 0

        if self.ackIND:
            self.ACK_REQUEST_DO.setPixmap(QtGui.QPixmap(dir + "/ICON/led-yellow-on.png"))
        else:
            self.ACK_REQUEST_DO.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))

        # 14. Update status Modbus
        self.errormessage.setText(self.updateMosbus.status())
        if self.updateMosbus.status() == "Terhubung":
            self.errormessage.setStyleSheet("color: green")
        else:
            self.errormessage.setStyleSheet("color: red")
    #13
    def updateIPMODBUS(self):
        self.errormessage.setText("Menghubungkan...")
        self.errormessage.setStyleSheet("color: yellow")
        c.host = self.IPHIMA.text()

    # 4. JPL Atas dan Bawah
    def updateJPL(self):

        # posisi JPL diwakilkan angka 0-9 mengartikan posisi per 10 derajat
        if self.derajatJPL >= 0 and self.derajatJPL < 9 and (self.tutupPerintang or self.BRDNDO) and not self.rem:
            self.derajatJPL += 1
        elif self.derajatJPL > 0 and self.derajatJPL <= 9 and (self.bukaPerintang or self.BRUPDO) and not self.rem:
            self.derajatJPL -= 1

        # logika posisi JPL UP atau DN
        if self.derajatJPL == 0:
            self.brPosUPDI = 1
            self.bukaPerintang = 0

        if self.derajatJPL == 9:
            self.brPosDNDI = 1
            self.tutupPerintang = 0

        if self.derajatJPL > 0 and self.derajatJPL < 9 :
            self.brPosUPDI = 0
            self.brPosDNDI = 0

        # update animasi posisi dejarat JPL
        self.JPL_ATAS.setPixmap(QtGui.QPixmap(dir + "/ICON/LEFT-JPL-" + str(self.derajatJPL) + ".png"))
        self.JPL_BAWAH.setPixmap(QtGui.QPixmap(dir + "/ICON/RIGHT-JPL-" + str(self.derajatJPL) + ".png"))

    # 5. Lampu JPL
    def flipLampuJPL(self):
        self.Lampu_JPLAtas_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-red-on.png"))
        self.Lampu_JPLAtas_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-red-on.png"))
    def flopLampuJPL(self):
        self.Lampu_JPLAtas_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLAtas_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-red-on.png"))
        self.Lampu_JPLBawah_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-red-on.png"))
        self.Lampu_JPLBawah_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
    def matikanLampuJPL(self):
        self.Lampu_JPLAtas_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLAtas_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_L.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))
        self.Lampu_JPLBawah_R.setPixmap(QtGui.QPixmap(dir + "/ICON/led-off.png"))

    ############################ list pengolahan push button console ####################################
    # 1. ACK Console PB DI
    def ackConsolePressed(self):
        self.ackConsoleDI = 1
        self.writeModbus()
    def ackConsoleReleased(self):
        self.klik.play()
        time.sleep(self.klik.get_length())
        self.ackConsoleDI = 0

    # 2. Buzzer PB DI
    def buzzerStopPressed(self):
        self.buzzerStopDI = 1
        self.writeModbus()
    def buzzerStopReleased(self):
        self.klik.play()
        time.sleep(self.klik.get_length())
        self.buzzerStopDI = 0

    # 3. Mode Auto
    def switchAUTO(self):
        self.matikanLampuJPL()
        self.tutupPerintang = 0
        self.bukaPerintang = 0
        if self.brSemiAutoDI == 1:
            self.SELECTOR_SWITCH.setPixmap(QtGui.QPixmap(dir + "/ICON/selector-switch-AUTOMATIC.png"))
            self.brAutoDI = 1
            self.brSemiAutoDI = 0
            self.brManualDI = 0

    # 4. Mode Semi Auto
    def switchSEMI(self):
        self.matikanLampuJPL()
        self.SELECTOR_SWITCH.setPixmap(QtGui.QPixmap(dir + "/ICON/selector-switch-SEMI AUTOMATIC.png"))
        self.brAutoDI = 0
        self.brSemiAutoDI = 1
        self.brManualDI = 0
        if self.alarmState:
            self.bunyiAlarm.bunyiAlarmStop()

    # 5. Mode Manual
    def switchMANUAL(self):
        if self.brSemiAutoDI == 1:
            self.SELECTOR_SWITCH.setPixmap(QtGui.QPixmap(dir + "/ICON/selector-switch-MANUAL.png"))
            self.brAutoDI = 0
            self.brSemiAutoDI = 0
            self.brManualDI = 1
            if self.alarmState and self.brManualDI:
                self.bunyiAlarm.bunyiAlarmStart()

    # 8. ACK dari TBI
    def ackTBIPressed(self):
        self.ackTBIDI = 1
        self.ackIND = 1
        self.writeModbus()

    def ackTBIReleased(self):
        self.ackTBIDI = 0

    # 9. triger ZP1
    def ZP1Pressed(self):
        self.ZP1DI = 1
        self.writeModbus()
    def ZP1Released(self):
        self.ZP1DI = 0

    # 10. triger ZP2
    def ZP2Pressed(self):
        self.ZP2DI = 1
        self.writeModbus()

    def ZP2Released(self):
        self.ZP2DI = 0

    # 11. triger ZP3
    def ZP3Pressed(self):
        self.ZP3DI = 1
        self.writeModbus()

    def ZP3Released(self):
        self.ZP3DI = 0

    # 12. HDL DI / informasi kereta langsungan
    def HDLPressed(self):
        self.ABCDHDLDI = 1
        self.ackIND = 1
        self.writeModbus()

    def HDLReleased(self):
        self.ABCDHDLDI = 0
        pass

    # logic internal console
    # nyala mati alarm ketika mode manual
    def ALARMclicked(self):
        #toogle alarm on atau off
        if self.alarmState == 1:
            self.ALARM.setIcon(self.iconalarmOff)
            self.alarmState = 0
        else:
            self.ALARM.setIcon(self.iconalarmOn)
            self.alarmState = 1
        self.writeModbus()

    # mapping tutup buka rem perintang
    def closeBRClicked(self):
        self.klik.play()
        time.sleep(self.klik.get_length())
        if not self.brAutoDI and not self.brPosDNDI:
            self.tutupPerintang= 1
    def openBRClicked(self):
        self.klik.play()
        time.sleep(self.klik.get_length())
        if not self.brAutoDI and not self.brPosUPDI:
            self.bukaPerintang = 1
    def brakePressed(self):
        self.rem = 1
    def brakeReleased(self):
        self.klik.play()
        time.sleep(self.klik.get_length())
        self.rem = 0

    def writeModbus(self):
        if self.PAKAIHIMA.isChecked():
            register0 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            register0[0] = self.ZP1DI
            register0[1] = self.ZP2DI
            register0[2] = self.ZP3DI
            register0[3] = self.ABCDHDLDI
            register0[4] = 0
            register0[5] = 0
            register0[6] = 0
            register0[7] = 0
            register0[8] = self.ackConsoleDI
            register0[9] = self.buzzerStopDI
            register0[10] = self.brAutoDI
            register0[11] = self.brSemiAutoDI
            register0[12] = self.brManualDI
            register0[13] = self.brPosUPDI
            register0[14] = self.brPosDNDI
            register0[15] = self.ackTBIDI

            self.updateMosbus.writeHolding(register0)

        else:
            # occ
            if (self.ZP1DI or self.ackTBIDI or self.ABCDHDLDI) and not self.occWar:
                self.occEar = 1
            elif self.ZP2DI:
                self.occEar = 0

            if self.ZP3DI and not self.occEar:
                self.occWar = 1
            elif self.ZP2DI:
                self.occWar = 0

            self.occ = self.occEar or self.occWar

            # alarmDO
            if self.occ and not self.brManualDI:
                self.alarmDO = 1
            elif not self.occ or self.brManualDI:
                self.alarmDO = 0

            # buzzerDO
            if self.buzzerStopDI:
                self.bzStp = 0
            if not self.bzStp and not self.occ:
                self.bzStp = 1

            if self.occ and self.bzStp:
                self.buzzerDO = 1
            elif not self.occ or not self.bzStp:
                self.buzzerDO = 0

            # BR UP or DN
            if self.occ and self.brAutoDI and not self.brPosDNDI and not self.BRUPDO:
                self.BRDNDO = 1
            elif not self.occ or not self.brAutoDI or self.brPosDNDI or self.BRUPDO:
                self.BRDNDO = 0

            if not self.occ and self.brAutoDI and not self.brPosUPDI and not self.BRDNDO:
                self.BRUPDO = 1
            elif self.occ or not self.brAutoDI or self.brPosUPDI or self.BRDNDO:
                self.BRUPDO = 0

            # ackDO ke TBI forward dari ack console atau deteksi posisi down saat mode auto
            if self.ackConsoleDI or (self.brAutoDI and self.brPosDNDI):
                self.ackDO = 1
            elif not(self.ackConsoleDI or (self.brAutoDI and self.brPosDNDI)):
                self.ackDO = 0

            if self.ackConsoleDI and self.occ:
                self.acknowledged = 1
            if not self.occ:
                self.acknowledged = 0

            if (self.occEar and self.flash and not self.ackConsoleDI) or (self.occEar and self.acknowledged):
                self.dirEarDO = 1
            elif not (self.occEar and self.flash and not self.ackConsoleDI) or (self.occEar and self.acknowledged) or not self.occEar:
                self.dirEarDO = 0

            if (self.occWar and self.flash and not self.ackConsoleDI) or (self.occWar and self.acknowledged):
                self.dirWarDO = 1
            elif not (self.occWar and self.flash and not self.ackConsoleDI) or (self.occWar and self.acknowledged) or not self.occWar:
                self.dirWarDO = 0

    def readModbus(self):
        if self.PAKAIHIMA.isChecked():
            data = self.updateMosbus.readHolding()
            data = data[0]

            register0 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            for i in range(16):
                register0[i] = data % 2
                data = data // 2

            self.buzzerDO = register0[8]
            self.alarmDO = register0[9]
            self.dirWarDO = register0[10]
            self.dirEarDO = register0[11]
            self.BRUPDO = register0[12]
            self.BRDNDO = register0[13]
            self.COMMDO = register0[14]
            self.ackDO = register0[15]

        self.updateINDConsole()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
